struct Segment {
    int n;
    vector <int> Max;
    Segment (int _n = 0) {
        n = _n;
        Max.resize(4 * n + 9, 0);
    }
    void update(int i, int l, int r, int u, int c) {
        if (l > r || u > r || l > u)
            return;
        if (l == r) {
            maximize(Max[i], c);
            return;
        }
        int m = (l + r) >> 1;
        update(i * 2, l, m, u, c);
        update(i * 2 + 1, m + 1, r, u, c);
        Max[i] = max(Max[i * 2], Max[i * 2 + 1]);
    }
    int get(int i, int l, int r, int u, int v) {
        if (l > r || u > v || u > r || l > v)
            return 0;
        if (u <= l && r <= v)
            return Max[i];
        int m = (l + r) >> 1;
        return max(get(i * 2, l, m, u, v), get(i * 2 + 1, m + 1, r, u, v));
    }
    void update(int u, int c) {
        update(1, 1, n, u, c);
    }
    int get(int u, int v) {
        return get(1, 1, n, u, v);
    }
};
