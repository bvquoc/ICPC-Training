struct segment {
    int n;
    vector <int> Max, lazy;
    segment (int _n = 0) {
        n = _n;
        Max.resize(4 * n + 9, 0);
        lazy.resize(4 * n + 9, 0);
    }
    void push (int i) {
        for (int j = 2 * i; j <= 2 * i + 1; j++) {
            Max[j] += lazy[i];
            lazy[j] += lazy[i];
        }
        lazy[i] = 0;
    }
    void update(int i, int l, int r, int u, int v, int c) {
        if (l > r | u > v || u > r || l > v)
            return;
        if (u <= l && r <= v) {
            Max[i] += c;
            lazy[i] += c;
            return;
        }
        push(i);
        int m = (l + r) >> 1;
        update(i * 2, l, m, u, v, c);
        update(i * 2 + 1, m + 1, r, u, v, c);
        Max[i] = max(Max[i * 2], Max[i * 2 + 1]);
    }
    int get(int i, int l, int r, int u, int v) {
        if (l > r || u > v || u > r || l > v)
            return -2e9;
        if (u <= l && r <= v)
            return Max[i];
        push(i);
        int m = (l + r) >> 1;
        return max(get(i * 2, l, m, u, v), get(i * 2 + 1, m + 1, r, u, v));
    }
    void update(int u, int v, int c) {
        update(1, 1, n, u, v, c);
    }
    int get(int u, int v) {
        return get(1, 1, n, u, v);
    }
};