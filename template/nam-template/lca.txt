vector<int> adj[N];
int n, h[N], P[N][17];

void dfs(int u) {
    for (int &v : adj[u]) {
        if(!P[v][0]) {
            P[v][0] = u;
            h[v] = h[u] + 1;
            dfs(v);
        }
    }
}

int lca(int u, int v) {
    if(h[u] < h[v]) {
        swap(u, v);
    }

    int log = log2(h[u]);

    for (int j = log; j >= 0; --j) {
        if(h[u] - (1 << j) >= h[v]) {
            u = P[u][j];
        }
    }

    if(u == v) {
        return u;
    }

    for (int j = log; j >= 0; --j) {
        if(P[u][j] != -1 && P[u][j] != P[v][j]) {
            u = P[u][j], v = P[v][j];
        }
    }

    return P[u][0];
}

void process() {
    cin >> n;
    for (int i = 1; i < n; ++i) {
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    P[1][0] = -1;
    h[1] = 0;
    dfs(1);

    for (int j = 1; (1 << j) <= n; ++j) {
        for (int i = 1; i <= n; ++i) {
            if(P[i][j - 1] != -1) {
                P[i][j] = P[P[i][j - 1]][j - 1];
            }
        }
    }

    int numQueries;
    cin >> numQueries;

    while(numQueries--) {
        int u, v;
        cin >> u >> v;
        cout << lca(u, v) << '\n';
    }
}