#include<bits/stdc++.h>
using namespace std;

#define inf 0x3f3f3f3f
#define N 200005
#define NMOD 4
typedef long long ll;

const int MOD[] = {(int) 1e9 + 2277, (int) 1e9 + 5277, (int) 1e9 + 8277, (int) 1e9 + 9277};
const int BASE = 256;

string s;
ll pw[NMOD][N];
int m, n;

struct Hash {
    ll value[NMOD];

    Hash() {
        memset(value, 0, sizeof(value));
    }

    Hash(char c) {
        for (int i = 0; i < NMOD; ++i) {
            value[i] = c;
        }
    }

    Hash operator + (const Hash &x) const {
        Hash res;
        for (int j = 0; j < NMOD; ++j) {
            res.value[j] = value[j] + x.value[j];
            if(res.value[j] >= MOD[j])
                res.value[j] -= MOD[j];
        }

        return res;
    }

    Hash operator - (const Hash &x) const {
        Hash res;
        for (int j = 0; j < NMOD; ++j) {
            res.value[j] = value[j] - x.value[j];
            if(res.value[j] < 0)
                res.value[j] += MOD[j];
        }

        return res;
    }

    Hash operator * (int k) const {
        Hash res;
        for (int j = 0; j < NMOD; ++j) {
            res.value[j] = 1LL * value[j] * pw[j][k] % MOD[j];
        }

        return res;
    }

    bool operator == (const Hash &x) const {
        for (int j = 0; j < NMOD; ++j) {
            if(value[j] != x.value[j]) {
                return false;
            }
        }

        return true;
    }

} h[N];

Hash getHash(int l, int r) {
    return (h[r] - h[l - 1]) * (n - r);
}

void prepare() {
    for (int j = 0; j < NMOD; ++j) {
        pw[j][0] = 1;
        for (int i = 1; i <= n; ++i) {
            pw[j][i] = pw[j][i - 1] * BASE % MOD[j];
        }
    }
}

void process() {
    cin >> s;
    n = s.length();

    prepare();
    for (int i = 1; i <= n; ++i) {
        h[i] = h[i - 1] + Hash(s[i - 1]) * i;
    }

    // to getHash from sub of s from l to r equal sub of s from l1 to r1 we can use hash:
    int l, l1, r, r1;
    cin >> l >> r >> l1 >> r1;
    if(getHash(l, r) == getHash(l1, r1)) {
        cout << "Equal";
    } else {
        cout << "Not Equal";
    }
}

int main() {
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);

    freopen(".inp", "r", stdin);
    freopen(".out", "w", stdout);

    process();
    return 0;
}